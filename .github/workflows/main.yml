name: Build images and update manifest info for Demo
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # Triggers the workflow on push or pull request events but only for the main branch
  registry_package:
    types: [published, updated]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      id:
        description: "run identifier"
        required: false
        default: "Job001"
        type: string

concurrency:
  group: ${{ github.ref }}Ci
  cancel-in-progress: true

# Tasks and jobs to run
jobs:
  build-and-push-image:
    name: Build image and push to DockerHub
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master' && !startsWith(github.event.head_commit.message, 'CHANGELOG update'))
    outputs:
      dotnet8-image: ${{ steps.dotnet8-image.outputs.image }}
      dotnet8-tag: ${{ steps.dotnet8-image.outputs.tag }}
    steps:
      - name: ${{github.event.inputs.id}}
        run: echo Running job ${{github.event.inputs.id}}
      - uses: actions/checkout@v4
      - name: Login to DockerHub for CR image repo...
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | \
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

        # Build tasks to run...
      - name: Build the .Net8 Docker image...
        id: dotnet8-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/webrestapi
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd csharp/WebRestAPI/WebRestAPI && \
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/webrestapi:${IMAGE_TAG} && \
          docker run --rm -t -d -p 5556:8080 ${{ secrets.DOCKERHUB_USERNAME }}/webrestapi:${IMAGE_TAG} && \
          sleep 10 && curl localhost:5556/api/repo/repostring && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/webrestapi:${IMAGE_TAG})

      - name: Build the CPP Docker image and test...
        id: cpp-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/cppdemo
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd CPPExamples/Std11 && \
          docker build . -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/cppdemo:latest && \
          docker run --rm -t ${{ secrets.DOCKERHUB_USERNAME }}/cppdemo:latest && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/cppdemo:latest)

      - name: Build the CPP MessageUtils Docker image...
        id: cppmsg-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/messageutils
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd CPPExamples/MessageUtils && \
          docker build . -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/messageutils:latest && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/messageutils:latest)

      - name: Build the NodeJS Parse Docker image...
        id: nodejsparse-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejsparse
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd nodejs/parseCmd/ && \
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejsparse:1.0 && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejsparse:1.0)
          
      - name: Build the NodeJS Docker image...
        id: nodejs-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejssample
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd nodejs/webapp && \
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejssample:1.0 && \
          docker run --rm -t -d -p 5557:8080 ${{ secrets.DOCKERHUB_USERNAME }}/nodejssample:1.0 && \
          sleep 10 && curl localhost:5557/repostring && \
          curl localhost:5557/ &&
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejssample:1.0)

      - name: Build the NodeJS DB Docker image...
        id: nodejsdb-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejsdb
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd nodejs/dbops/app/ && \
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejsdb:1.0 && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejsdb:1.0)

      - name: Build the NodeJS Table Docker image...
        id: nodejstable-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejstable
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd nodejs/Azure/Table/ && \
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejstable:1.0 && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejstable:1.0)
            
      - name: Build the NodeJS File Docker image...
        id: nodejsfile-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejsfile
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd nodejs/Azure/File/ && \
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejsfile:1.0 && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejsfile:1.0)

      - name: Build the NodeJS OpenAI chatbot Docker image...
        id: nodejschatbot-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejschatbot
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd nodejs/genai/openai/chatbot && \
            docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejschatbot:1.0 && \
            docker run --rm -t -d -p 8080:5000 \
              -e OPENAI_API_KEY=ABCD \
              ${{ secrets.DOCKERHUB_USERNAME }}/nodejschatbot:1.0 && \
            sleep 10 && curl localhost:8080/status && \
            curl localhost:8080/ && \
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejschatbot:1.0)

      - name: Stopping containers for further testing...
        run: (docker stop $(docker container ls -q))
    
      - name: Build the NodeJS Gemini chatbot Docker image...
        id: nodejsgcpchatbot-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejsgcpchatbot
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd nodejs/genai/gemini/chatbot && \
            docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejsgcpchatbot:1.0 && \
            docker run --rm -t -d -p 8080:5000 \
              -e GOOGLE_API_KEY=ABCD \
              ${{ secrets.DOCKERHUB_USERNAME }}/nodejsgcpchatbot:1.0 && \
            sleep 10 && curl localhost:8080/status && \
            curl localhost:8080/ && \
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejsgcpchatbot:1.0)

      - name: Build the NodeJS Graph Docker image...
        id: nodejsquery-image
        run: |
            IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/nodejsquery
            IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
            echo "::set-output name=image::$IMAGE_ID"
            echo "::set-output name=tag::$IMAGE_TAG"
  
            (cd nodejs/Azure/Graph/ && \
            docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/nodejsquery:1.0 && \
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodejsquery:1.0)
  
      - name: Stopping containers for further testing...
        run: (docker stop $(docker container ls -q))

      - name: Build the chatbot Docker image...
        id: pythonchat-image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/aichatbot
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$IMAGE_TAG"

          (cd python/chatbot/ && \
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/chatbot:1.0 && \
          docker run --rm -t -d -p 8080:5000 \
            -e OPENAI_API_KEY=ABCD \
            ${{ secrets.DOCKERHUB_USERNAME }}/chatbot:1.0 && \
          sleep 10 && curl localhost:8080/status && \
          curl localhost:8080/ && \
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/chatbot:1.0)
  
      - name: Stop containers...
        run: (docker stop $(docker container ls -q))

  update-changelog-gemini:
    name: Update Gemini Chatbot Changelog
    needs: build-and-push-image
    if: ${{ !startsWith(github.event.head_commit.message, 'CHANGELOG update') }}
    secrets: inherit
    uses: ./.github/workflows/changelog-workflow.yml
    with:
      SUBDIRECTORY_PATH: 'nodejs/genai/gemini/chatbot'
      DEFAULT_COMMIT_MESSAGE_TITLE: 'CHANGELOG update'

  update-changelog-openai:
    name: Update OpenAI Chatbot Changelog
    needs: update-changelog-gemini
    if: ${{ !startsWith(github.event.head_commit.message, 'CHANGELOG update') }}
    secrets: inherit
    uses: ./.github/workflows/changelog-workflow.yml
    with:
      SUBDIRECTORY_PATH: 'nodejs/genai/openai/chatbot'
      DEFAULT_COMMIT_MESSAGE_TITLE: 'CHANGELOG update'

  update-dev-manifest:
    name: Update Dev deployment manifest
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.event_name == 'push'

    steps:
      - name: Update GitOps deployment manifest values
        uses: tpayne/github-actions/productmanifest@main
        continue-on-error: true
        with:
          gitops-repo-url: https://github.com/tpayne/argo-suite-samples.git
          manifest-file: examples/simple/helm/dev/values-releaseversions.yaml
          github-username: ${{ github.actor }}
          github-token: ${{ secrets.GT_TOKEN }}
          github-email: ${{ github.actor }}@users.noreply.github.com
          image-list: github-service:${{ needs.build-and-push-image.outputs.dotnet8-image }}
          image-tag: ${{ needs.build-and-push-image.outputs.dotnet8-tag }}
